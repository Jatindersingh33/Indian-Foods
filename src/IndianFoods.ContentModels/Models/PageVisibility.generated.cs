//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.7.99
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace IndianFoods.ContentModels
{
	// Mixin content Type 1091 with alias "pageVisibility"
	/// <summary>Page Visibility</summary>
	public partial interface IPageVisibility : IPublishedContent
	{
		/// <summary>Exclude From Sitemap</summary>
		bool ExcludeFromSitemap { get; }

		/// <summary>Hide From Navigation</summary>
		bool HideFromNavigation { get; }

		/// <summary>Redirect URL</summary>
		IPublishedContent RedirectUrl { get; }
	}

	/// <summary>Page Visibility</summary>
	[PublishedContentModel("pageVisibility")]
	public partial class PageVisibility : PublishedContentModel, IPageVisibility
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pageVisibility";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PageVisibility(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PageVisibility, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Exclude From Sitemap
		///</summary>
		[ImplementPropertyType("excludeFromSitemap")]
		public bool ExcludeFromSitemap
		{
			get { return GetExcludeFromSitemap(this); }
		}

		/// <summary>Static getter for Exclude From Sitemap</summary>
		public static bool GetExcludeFromSitemap(IPageVisibility that) { return that.GetPropertyValue<bool>("excludeFromSitemap"); }

		///<summary>
		/// Hide From Navigation
		///</summary>
		[ImplementPropertyType("hideFromNavigation")]
		public bool HideFromNavigation
		{
			get { return GetHideFromNavigation(this); }
		}

		/// <summary>Static getter for Hide From Navigation</summary>
		public static bool GetHideFromNavigation(IPageVisibility that) { return that.GetPropertyValue<bool>("hideFromNavigation"); }

		///<summary>
		/// Redirect URL
		///</summary>
		[ImplementPropertyType("redirectURL")]
		public IPublishedContent RedirectUrl
		{
			get { return GetRedirectUrl(this); }
		}

		/// <summary>Static getter for Redirect URL</summary>
		public static IPublishedContent GetRedirectUrl(IPageVisibility that) { return that.GetPropertyValue<IPublishedContent>("redirectURL"); }
	}
}
